{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Creates an interactive paried bar chart\n\n### Usage\n\n    <px-vis-paired-bar\n      width=\"1200\"\n      height=\"500\"\n      scale-padding=\"0.1\"\n      margin='{\n        \"left\": 130,\n        \"right\": 130,\n        \"top\": 10,\n        \"bottom\": 50\n      }'\n      chart-data=\"[[chartData]]\"\n      series-config=\"[[seriesConfig]]\">\n    </px-vis-paired-bar>\n\n### Styling\nThe following custom properties are available for styling:\n\nCustom property | Description\n----------------|-------------\n  `--px-vis-axis-color` | The color for the axis lines, axis ticks, and axis tick labels\n  `--px-vis-axis-title-color` | The color for the axis title\n  |\n  |\n  |\n  `--px-vis-gridlines-color` | The color for the gridlines\n  |\n  |\n  |\n  `--px-vis-threshold-color` | The default color for a threshold\n  |\n  |\n  |\n  `--px-vis-register-series-name` | The color of the data series name\n  `--px-vis-register-data-value` | The color of the data series value\n  `--px-vis-register-box` | The color of the box around the register when a scrollbar is present\n  |\n  |\n  |\n  `--px-vis-series-color-0` | These are the colors used to represent the data series on the charts. Used in numerical order by default. Colors MUST start at 0 and cannot contain gaps between numbers.\n  `--px-vis-series-color-1` |\n  |\n  |\n  |\n  `--px-tooltip-background-color` | The color of the tooltip\n  `--px-tooltip-text-color` | The color of the tooltip text\n  `--px-tooltip-light-background-color` | The color of the light version tooltip\n  `--px-tooltip-light-text-color` | The color of the light version tooltip text\n  `--px-tooltip-light-border-color`| The color of the light version tooltip border\n  |\n  |\n  |\n  `--px-vis-font-family` | The font family for all labels and text",
      "summary": "",
      "path": "px-vis-paired-bar.html",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "type": "number",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "_defaultMargin",
          "type": "Object",
          "description": "Copy of the default margin for checking if it has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "margin",
          "type": "Object",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "chartData",
          "type": "Array",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 375,
              "column": 6
            },
            "end": {
              "line": 377,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "completeSeriesConfig",
          "type": "Object",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "tooltipData",
          "type": "Object",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 677,
              "column": 4
            },
            "end": {
              "line": 680,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "defaultEmptyData",
          "type": "Object",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 685,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "extentsData",
          "type": "Object",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 786,
              "column": 4
            },
            "end": {
              "line": 789,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extentsAction",
          "type": "string",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 793,
              "column": 4
            },
            "end": {
              "line": 796,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "chartExtents",
          "type": "Object",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "dataExtents",
          "type": "Object",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1216,
              "column": 4
            },
            "end": {
              "line": 1219,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "svg",
          "type": "Object",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_uniqueIdsUsed",
          "type": "Array",
          "description": "Array of unique IDs generated for this comp. cleaned from global\nstore on detached",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2243,
              "column": 5
            },
            "end": {
              "line": 2248,
              "column": 6
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.uniqueIds"
        },
        {
          "name": "pxSvgElem",
          "type": "Object",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "type": "Object",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "type": "Object",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "isMultiY",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "offset",
          "type": "Array",
          "description": "An optional offset for a variety of elements",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[0,0]",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "selectedDomain",
          "type": "Object",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 651,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "xAxisType",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 10
            },
            "end": {
              "line": 455,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"linear\""
        },
        {
          "name": "yAxisType",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 10
            },
            "end": {
              "line": 460,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"scaleBand\""
        },
        {
          "name": "domainChanged",
          "type": "boolean",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "preventWebWorkerSynchronization",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 10
            },
            "end": {
              "line": 450,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "mutedSeries",
          "type": "Object",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 465,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hardMute",
          "type": "boolean",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 472,
              "column": 5
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "_extents",
          "type": "Array",
          "description": "Holder for chart extents from the seriesConfig object",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[[],[]]",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataHasChanged",
          "type": "number",
          "description": "Boolean to detect if the chart data has changed",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calculatingDomain",
          "type": "boolean",
          "description": "Boolean to indicate if we are currently calculating the domain",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_defaultScaleValue",
          "type": "Object",
          "description": "default extents to use if none are specified\n\n0 for y axis for best practice",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"x\":[null],\"y\":[null]}",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "disableDynamicUpdate",
          "type": "boolean",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_runOnce",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chartId",
          "type": "string",
          "description": "Internal unique ID",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "scalePadding",
          "type": "number",
          "description": "The padding for ordinal type scales - effective controls the spacing between ordinal groups\n\nExpressed as a percent of the ordinal group width, so a value of 0.5 for a bar chart means your bar and the gap between bars are the same size",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0.5",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "clipPath",
          "type": "string",
          "description": "Holder for a clipping path ID",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 798,
              "column": 4
            },
            "end": {
              "line": 801,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "seriesClipPath",
          "type": "string",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 806,
              "column": 4
            },
            "end": {
              "line": 809,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "tooltipConfig",
          "type": "Object",
          "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1101,
              "column": 4
            },
            "end": {
              "line": 1103,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "registerConfig",
          "type": "Object",
          "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1109,
              "column": 4
            },
            "end": {
              "line": 1111,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "xAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1187,
              "column": 4
            },
            "end": {
              "line": 1189,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "yAxisConfig",
          "type": "Object",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1195,
              "column": 4
            },
            "end": {
              "line": 1197,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "hideRegister",
          "type": "boolean",
          "description": "Allows to hide the register",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1035,
              "column": 4
            },
            "end": {
              "line": 1039,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hideRegisterChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_registerType",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1040,
              "column": 4
            },
            "end": {
              "line": 1042,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_registerWrapperClass",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1043,
              "column": 4
            },
            "end": {
              "line": 1046,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_parentResizable",
          "type": "Object",
          "description": "The closest ancestor element that implements `IronResizableBehavior`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_parentResizableChanged\""
            }
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyingDescendant",
          "type": "boolean",
          "description": "True if this element is currently notifying its descendant elements of\nresize.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "preventResize",
          "type": "boolean",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 763,
              "column": 6
            },
            "end": {
              "line": 767,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_preventResizeChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartHorizontalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 777,
              "column": 6
            },
            "end": {
              "line": 780,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chartVerticalAlignment",
          "type": "string",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 790,
              "column": 6
            },
            "end": {
              "line": 793,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"center\"",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_chartWrapperClass",
          "type": "string",
          "description": "Class to be used on the external wrapper within the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 797,
              "column": 6
            },
            "end": {
              "line": 800,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounceResizeTiming",
          "type": "number",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 805,
              "column": 6
            },
            "end": {
              "line": 808,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "250",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "thresholdConfig",
          "type": "Object",
          "description": "Configuration object used to customize the threshold properties.\nPlease refer to px-vis-threshold (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2847,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.thresholdConfig"
        },
        {
          "name": "_defaultThresholdConfig",
          "type": "Object",
          "description": "Configuration object to define what the default icon should be. This gets used if a) no eventConfig is defined or b) the particular event is not defined in the eventConfig object.\n\n```\nDefault: {\n  'strokeWidth': '1',\n  'dashPattern': '5,2'\n}\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1593,
              "column": 4
            },
            "end": {
              "line": 1601,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"strokeWidth\":\"1\",\"dashPattern\":\"5,2\"}",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "thresholdData",
          "type": "Array",
          "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1614,
              "column": 4
            },
            "end": {
              "line": 1616,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "layer",
          "type": "Array",
          "description": "Array of the svg layers",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1425,
              "column": 4
            },
            "end": {
              "line": 1428,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "numberOfLayers",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1429,
              "column": 4
            },
            "end": {
              "line": 1431,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generateLayers",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1432,
              "column": 4
            },
            "end": {
              "line": 1435,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "dynamicMenuConfig",
          "type": "Array",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2073,
              "column": 4
            },
            "end": {
              "line": 2075,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "seriesColorList",
          "type": "Array",
          "description": "Defines an colors in order that will be used for series.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[\"rgb(0,0,0)\",\"rgb(75,75,75)\",\"rgb(125,125,125)\",\"rgb(200,200,200)\"]",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "actionConfig",
          "type": "Object",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2096,
              "column": 4
            },
            "end": {
              "line": 2099,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "PxVisBehavior.actionConfig"
        },
        {
          "name": "showTooltip",
          "type": "boolean",
          "description": "Whether to display the tooltip",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2124,
              "column": 4
            },
            "end": {
              "line": 2127,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.showTooltip"
        },
        {
          "name": "_internalShowTooltip",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2128,
              "column": 4
            },
            "end": {
              "line": 2131,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true",
          "inheritedFrom": "PxVisBehaviorChart.showTooltip"
        },
        {
          "name": "_computedShowTooltip",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2132,
              "column": 4
            },
            "end": {
              "line": 2135,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PxVisBehaviorChart.showTooltip"
        },
        {
          "name": "_verticalRegisterHeight",
          "type": "number",
          "description": "the calculated height that should be used by the vertical register",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2593,
              "column": 4
            },
            "end": {
              "line": 2595,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.sizeVerticalRegister"
        },
        {
          "name": "_verticalRegisterHeightDeductions",
          "type": "Array",
          "description": "When calculating the register height if the height deductions to do\nhaven't been passed in (i.e height changed rather than ironResize being called)\nthen this list of string will be used to search for elements IDs and calculate\ntheir height, deducting them",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2602,
              "column": 4
            },
            "end": {
              "line": 2604,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.sizeVerticalRegister"
        },
        {
          "name": "_verticalRegisterDrawingCanvasId",
          "type": "string",
          "description": "ID of the element where the drawing happens. used to get its height property",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2608,
              "column": 4
            },
            "end": {
              "line": 2610,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.sizeVerticalRegister"
        },
        {
          "name": "wwDataSyncCounter",
          "type": "number",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "_wwSyncRequestDataDeletion",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 489,
              "column": 6
            },
            "end": {
              "line": 492,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataDeleted",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 496,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataDeletionTimeout",
          "type": "number",
          "description": "After detaching the chart time after which we will delete\nthe synced data of the chart from the webworker. If the\nchart is re-attached in the meantime the deletion will\nbe canceled to avoid a re-sync",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 506,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1500",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_wwSyncDataPropName",
          "type": "string",
          "description": "Name of the property to be kept in sync. Usually chartData but can\nbe overriden for a filtered dataset instead for example",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 511,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"chartData\"",
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_updateStyles",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3240,
              "column": 4
            },
            "end": {
              "line": 3242,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "_stylesUpdated",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3243,
              "column": 4
            },
            "end": {
              "line": 3246,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0",
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "annotationData",
          "type": "Array",
          "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n```\n   [{\n       x: 1325897523,\n       y: 15.7,\n       series: y0,\n       data: {...},\n    ...\n    ]\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3388,
              "column": 4
            },
            "end": {
              "line": 3393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "showStrongIcon",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3395,
              "column": 4
            },
            "end": {
              "line": 3398,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "_svgClientRect",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3162,
              "column": 4
            },
            "end": {
              "line": 3162,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_canvasClientRect",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3163,
              "column": 4
            },
            "end": {
              "line": 3163,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_winX",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3164,
              "column": 4
            },
            "end": {
              "line": 3164,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_winY",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3165,
              "column": 4
            },
            "end": {
              "line": 3165,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_rightX",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 461,
              "column": 10
            },
            "end": {
              "line": 461,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_leftX",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 462,
              "column": 10
            },
            "end": {
              "line": 462,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_domainChanged",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 10
            },
            "end": {
              "line": 466,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "seriesConfig",
          "type": "Object",
          "description": "A configuration file to associate series data keys, name, type, and colors.\n\nProvide two series, one for the left, one for the right.\n\n```\n {\n    \"left\": {  //seriesKey is a unique identifier for the configuration\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"male\",  //index or key name for dependent variable\n        \"y\": \"age\",  //index or key name for independent variable\n        \"xAxisUnit\": \"People\" //Unit to be used for the X axis.\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(0,255,0)\" //color you want for the series\n    },\n    \"right\": {  //seriesKey is a unique identifier for the configuration\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"female\",  //index or key name for dependent variable\n        \"y\": \"age\",  //index or key name for independent variable\n        \"xAxisUnit\": \"People\" //Unit to be used for the X axis.\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(255,0,0)\" //color you want for the series\n    }\n }\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 10
            },
            "end": {
              "line": 494,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_seriesKeys",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 10
            },
            "end": {
              "line": 495,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_leftData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 10
            },
            "end": {
              "line": 496,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_rightData",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 497,
              "column": 10
            },
            "end": {
              "line": 497,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "startFromZero",
          "type": "boolean",
          "description": "DO NOT CHANGE THIS UNLESS YOU KNOW WHAT YOU ARE DOING\n\nBar charts in nearly all cases should start from 0. If you have a special case and understand the ramifications, change this to false to allow it to use the `min` value from your data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 10
            },
            "end": {
              "line": 506,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "rightReferenceConfig",
          "type": "Object",
          "description": "A configuration object needed to draw reference curves. Format is similar to seriesConfig. Valid entries:\n- `x` : default: 'x'\n- `y`: default: 'y'\n- `interpolationFunction` : default: Px.d3.curveCardinal\n- `color` :\n- `strokeWidth` default: 1",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 10
            },
            "end": {
              "line": 516,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "leftReferenceConfig",
          "type": "Object",
          "description": "A configuration object needed to draw reference curves. Format is similar to seriesConfig. Valid entries:\n- `x` : default: 'x'\n- `y`: default: 'y'\n- `interpolationFunction` : default: Px.d3.curveCardinal\n- `color` :\n- `strokeWidth` default: 1",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 10
            },
            "end": {
              "line": 526,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "referenceData",
          "type": "Array",
          "description": "Data to create reference curves. Format matches chartData and requires a referenceConfig with similar props to seriesConfig. Supply data for both left and right in this array",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 531,
              "column": 10
            },
            "end": {
              "line": 531,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_isValidData",
          "description": "returns true if the data is valid: non NaN, null or undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isDataNotNull",
          "description": "returns true if the data is not null",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehavior.dataChecks"
        },
        {
          "name": "_isObjEmpty",
          "description": "Checks to see if an object is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 819,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isD3Empty",
          "description": "Checks to see if an d3 obj is empty",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 835,
              "column": 2
            },
            "end": {
              "line": 840,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesD3HaveValues",
          "description": "Checks to see if an d3 obj has something",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 848,
              "column": 2
            },
            "end": {
              "line": 853,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_doesObjHaveValues",
          "description": "Checks to see if an object has values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 861,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hasProps",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 872,
              "column": 2
            },
            "end": {
              "line": 884,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarDefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 892,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_isVarUndefined",
          "description": "Checks to see if an object is defined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 909,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "return": {
            "type": "bool"
          },
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_escapeCssSelector",
          "description": "escapes '.' in css selectors so that we can appropriately select stuff with dots in thei ids",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 914,
              "column": 2
            },
            "end": {
              "line": 916,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkThemeVariable",
          "description": "Checks if a theme variable exists, if so, returns the theme value, if not, returns the default",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 921,
              "column": 2
            },
            "end": {
              "line": 938,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "varName"
            },
            {
              "name": "defaultValue"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_checkColorType",
          "description": "Checks if a color is already hex or rgb, if must be a colors obj",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 948,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_hexToRgb",
          "description": "converts a hex to rgb color",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 953,
              "column": 2
            },
            "end": {
              "line": 964,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_binarySearch",
          "description": "Binary search through sorted chartData",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 969,
              "column": 2
            },
            "end": {
              "line": 986,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "val"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_fuzzyBinarySearch",
          "description": "Binary search through sorted chartData returning all vals within a window",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 991,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "_getAdjacentValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1010,
              "column": 2
            },
            "end": {
              "line": 1040,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "key"
            },
            {
              "name": "lowerFuzz"
            },
            {
              "name": "upperFuzz"
            },
            {
              "name": "lowerIndex"
            },
            {
              "name": "upperIndex"
            },
            {
              "name": "index"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "clone",
          "description": "deep-copy object into newObject",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1045,
              "column": 2
            },
            "end": {
              "line": 1058,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            },
            {
              "name": "newObject"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "isVarNumber",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1060,
              "column": 2
            },
            "end": {
              "line": 1062,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n"
            }
          ],
          "inheritedFrom": "PxVisBehavior.commonMethods"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3172,
              "column": 2
            },
            "end": {
              "line": 3174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "generateRandomID",
          "description": "Generates a random id string.\n\nTakes a string prefix, then adds 10 random chars",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseStr"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "cloneSVGElem",
          "description": "Clones a SVG elem and sets a component property with the d3 instance of that clone.\n\nThe intent of this is to clone the high level 'g' elem we draw to and attach it.\nThe draw order matters  in SVG and we want the some stuff to appear on top of everything else\nSince we cannot easily ensure it draw order with components, we can stick top level items in a different 'g' that we know is drawn after the main 'g'",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "prop"
            },
            {
              "name": "onBottom"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawSVGOnCanvas",
          "description": "Draws the current svg into a canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "elem"
            },
            {
              "name": "callback"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_drawCanvg",
          "description": "Uses canvg third party to \"translate\" svg to javascript instructions\nfor the canvas, and draw on the canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 170,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_nativeDrawSvgOnCanvas",
          "description": "Tries to draw the SVG to canvas and if that doesnt work, falls back on a failure callback",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "canvas"
            },
            {
              "name": "svgData"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            },
            {
              "name": "sucessCallback"
            },
            {
              "name": "failureCallback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "_getSVGOuterHtml",
          "description": "fix for IE to get outer HTML",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "hasUndefinedArguments",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args"
            }
          ],
          "inheritedFrom": "PxVisBehavior.observerCheck"
        },
        {
          "name": "_getIsMultiY",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 453,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_processYValues",
          "description": "This functions process Y axis and applies the result to some variable.\nIf in single Y it just run the function and assign the result to `result`, if multi Y\nit runs the function for each axis and stores the result against the axis key\non `result`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 484,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "_isTimeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3436,
              "column": 2
            },
            "end": {
              "line": 3438,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_isOrdinalType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3440,
              "column": 2
            },
            "end": {
              "line": 3442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            }
          ],
          "inheritedFrom": "PxVisBehavior.scaleTypeCheck"
        },
        {
          "name": "_recreateScales",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setXScale",
          "description": "Sets the x scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 122,
              "column": 2
            },
            "end": {
              "line": 127,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetXScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 128,
              "column": 2
            },
            "end": {
              "line": 148,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setYScale",
          "description": "Sets the y scale or update its range if already existing",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 160,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMultiYScale",
          "description": "Sets a multi y scale",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_internalSetMultiYScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 229,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "height"
            },
            {
              "name": "margin"
            },
            {
              "name": "axes"
            },
            {
              "name": "forceRecreation"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setScale",
          "description": "Helper function to set the x and y based on scale type",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 236,
              "column": 2
            },
            "end": {
              "line": 267,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "range"
            },
            {
              "name": "currentAxis"
            },
            {
              "name": "isMultiAxis"
            },
            {
              "name": "key"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setDomain",
          "description": "Calculates and Sets the x and y domain after data loads\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 276,
              "column": 3
            },
            "end": {
              "line": 342,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_createOrdinalInvert",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 344,
              "column": 2
            },
            "end": {
              "line": 356,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            },
            {
              "name": "invert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyExtents",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 358,
              "column": 2
            },
            "end": {
              "line": 396,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "extents"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_determineExtents",
          "description": "Calculates the extents based on chartExtents, dataExtents, and the data.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 496,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkForExtents",
          "description": "Looks at chartExtents and dataExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 537,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "chartExtents"
            },
            {
              "name": "dataExtents"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkChartExtents",
          "description": "Looks at chartExtents for extents values per axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 543,
              "column": 2
            },
            "end": {
              "line": 551,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkDataExtents",
          "description": "Looks at dataExtents for extents values per axis; resolves chartExtents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 557,
              "column": 2
            },
            "end": {
              "line": 574,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dExts"
            },
            {
              "name": "cExts"
            },
            {
              "name": "axis"
            },
            {
              "name": "bool"
            },
            {
              "name": "exts"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findMinMax",
          "description": "Find the min and max values or ordinal values in data, for X and/or Y axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 606,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "doX"
            },
            {
              "name": "doY"
            },
            {
              "name": "ordX"
            },
            {
              "name": "ordY"
            },
            {
              "name": "timeX"
            },
            {
              "name": "result"
            },
            {
              "name": "keys"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_getDataExtents",
          "description": "Goes through the data and extracts min and max values",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 612,
              "column": 2
            },
            "end": {
              "line": 626,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "d"
            },
            {
              "name": "keysArr"
            },
            {
              "name": "axis"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_findTimeMM",
          "description": "Finds time based Max and Min",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 632,
              "column": 2
            },
            "end": {
              "line": 639,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "result"
            },
            {
              "name": "d"
            },
            {
              "name": "l"
            },
            {
              "name": "x"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMin",
          "description": "Compares existing min and new data for min",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 645,
              "column": 2
            },
            "end": {
              "line": 649,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setMax",
          "description": "Compares existing max and new data for max",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 655,
              "column": 2
            },
            "end": {
              "line": 659,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "d"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_processDataValues",
          "description": "Goes through the values from the data and calcs the extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 665,
              "column": 2
            },
            "end": {
              "line": 681,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOrd"
            },
            {
              "name": "r"
            },
            {
              "name": "d"
            },
            {
              "name": "axis"
            },
            {
              "name": "key"
            },
            {
              "name": "i"
            },
            {
              "name": "doMin"
            },
            {
              "name": "doMax"
            },
            {
              "name": "v0"
            },
            {
              "name": "v1"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_checkInSeriesConfig",
          "description": "Loop through each series and see if it has mins and maxes in seriesConfig",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 688,
              "column": 0
            },
            "end": {
              "line": 700,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_applyChartExtents",
          "description": "Apply chart extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 706,
              "column": 0
            },
            "end": {
              "line": 727,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_searchForExtents",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 733,
              "column": 0
            },
            "end": {
              "line": 749,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "seriesToSearch"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcSeriesToSearch",
          "description": "Search for multi axis extents",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 755,
              "column": 0
            },
            "end": {
              "line": 767,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "exts"
            },
            {
              "name": "a"
            },
            {
              "name": "seriesToSearch"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_calcMultiAxisExtents",
          "description": "calculates chart extents for multi axis",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 773,
              "column": 0
            },
            "end": {
              "line": 817,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_updateDomain",
          "description": "When the domain gets set via a user interaction, set the scale function to use the new domain\n\nhttps://github.com/mbostock/d3/wiki/API-Reference",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 826,
              "column": 2
            },
            "end": {
              "line": 851,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedDomain"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_chartDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 852,
              "column": 2
            },
            "end": {
              "line": 857,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_setAxisScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 859,
              "column": 2
            },
            "end": {
              "line": 897,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "leftDims"
            },
            {
              "name": "rightDims"
            },
            {
              "name": "leftAxisSize"
            },
            {
              "name": "rightAxisSize"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getPixelFromData",
          "description": "Gets pixel values for data values relating to a series (series is the id\nused in seriesConfig). data is an array: [xValue, yValue]\nif margin is specified it will use thos to adjust the pixel values\ninstead of the normal `margin` property\nreturns an object with the result and whether that result is out of\nbounds for the current domain",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 907,
              "column": 2
            },
            "end": {
              "line": 925,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "series"
            },
            {
              "name": "margin"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "getDataFromPixel",
          "description": "Gets data values for pixel values relating to a series (series is the id\nused in seriesConfig). pixelVal is an array: [xValue, yValue]\nplease note that the values returned have no guarantee to match any\nactual chart data, this is just a conversion based on pixel",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 933,
              "column": 2
            },
            "end": {
              "line": 941,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pixelVal"
            },
            {
              "name": "series"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "_pixelRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 946,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "addClipPath",
          "description": "Add the clip-path attr to the element",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 816,
              "column": 2
            },
            "end": {
              "line": 820,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elem"
            }
          ],
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "getImage",
          "description": "Takes a graphic \"snapshot\" of the component and pass results through a callback:\n- a canvas containing the graphical snapshot\n- a png base 64 data uri\n\ncallback object:\n{\n canvas: theCanvasObject\n image: \"data:image/png;base64;iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACN...\"\n}\n\nthe data uri can be used to save the image and the canvas object to do\nfurther processing, such as combining different elements snapshot into one image",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 599,
              "column": 4
            },
            "end": {
              "line": 670,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "renderLegend"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_finishGetImage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 671,
              "column": 4
            },
            "end": {
              "line": 676,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback"
            },
            {
              "name": "canvas"
            },
            {
              "name": "renderLegend"
            },
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_getRegisterWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 677,
              "column": 4
            },
            "end": {
              "line": 711,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "drawingWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_drawRegister",
          "description": "Draws a fake representation of the registers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 715,
              "column": 4
            },
            "end": {
              "line": 743,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context"
            },
            {
              "name": "startWidth"
            },
            {
              "name": "drawingHeight"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.saveImage"
        },
        {
          "name": "_applyConfigToElement",
          "description": "Applies the config object to the element. Each key in the config object\nis the name of the property to be applied",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 875,
              "column": 4
            },
            "end": {
              "line": 893,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "config"
            },
            {
              "name": "element"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.subConfiguration"
        },
        {
          "name": "_getHideClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1006,
              "column": 2
            },
            "end": {
              "line": 1014,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hide"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.getHideClass"
        },
        {
          "name": "_getRegisterWrapperClass",
          "description": "determine the flex class on the wrapper depending on where the register is",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1051,
              "column": 2
            },
            "end": {
              "line": 1068,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "_hideRegisterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1069,
              "column": 2
            },
            "end": {
              "line": 1075,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3249,
              "column": 2
            },
            "end": {
              "line": 3270,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehavior.updateStylesOverride"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3176,
              "column": 2
            },
            "end": {
              "line": 3179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "notifyResize",
          "description": "Can be called to manually notify a resizable and its descendant\nresizables of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "assignParentResizable",
          "description": "Used to assign the closest resizable ancestor to this resizable\nif the ancestor detects a request for notifications.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "stopResizeNotificationsFor",
          "description": "Used to remove a resizable descendant from the list of descendants\nthat should be notified of a resize change.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "resizerShouldNotify",
          "description": "This method can be overridden to filter nested elements that should or\nshould not be notified by the current element. Return true if an element\nshould be notified, or false if it should not be notified.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 59
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "A candidate descendant element that\nimplements `IronResizableBehavior`."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the `element` should be notified of resize."
          },
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onDescendantIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_fireResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_onIronRequestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_parentResizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "parentResizable"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_notifyDescendant",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 181,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descendant"
            }
          ],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_requestResizeNotifications",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-resizable-behavior/iron-resizable-behavior.html",
            "start": {
              "line": 183,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronResizableBehavior"
        },
        {
          "name": "_preventResizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 819,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_secondaryToolbarToggled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 820,
              "column": 4
            },
            "end": {
              "line": 828,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_getChartWrapperClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 829,
              "column": 4
            },
            "end": {
              "line": 853,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hor"
            },
            {
              "name": "vert"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "_createLayers",
          "description": "Creates <g> layers",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1445,
              "column": 2
            },
            "end": {
              "line": 1468,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "_createLayersOnce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1469,
              "column": 2
            },
            "end": {
              "line": 1480,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "numberOfLayers"
            },
            {
              "name": "generateLayers"
            },
            {
              "name": "propName"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 6
            },
            "end": {
              "line": 557,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "syncCSSTheme",
          "description": "Retrieves the CSS style variables set on this element and applies them\nto the appropriate properties, triggering a redraw.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_debounceSyncCSSTheme",
          "description": "Debounced function call for `syncCSSTheme` method. Loops through available\nstyle variables to apply them to appropriate objects.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_applyStyleVariables",
          "description": "Called when there is at least one style variable applied (the first is\nexpected to be named `--px-vis-series-color-0`). Loops through each\nstyle variable in the format `--px-vis-series-color-[n]` and applies\nthe resulting values and series color order to the element. Stops looping\nthrough style variables when it finds a gap.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 149,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_colorHexToRgb",
          "description": "Converts a hex-format color to RGB.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex",
              "type": "String",
              "description": "A color in hex format"
            }
          ],
          "return": {
            "type": "String",
            "desc": "A color in RGB format"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_checkIfDevSetSeriesColorOrder",
          "description": "Compares seriesColorOrder property value to the seriesColorOrder to determine if the dev set their own override.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "true if dev set seriesColorOrder"
          },
          "inheritedFrom": "PxColorsBehavior.dataVisColorTheming"
        },
        {
          "name": "_actionRequest",
          "description": "Runs a custom function within the context of the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1980,
              "column": 2
            },
            "end": {
              "line": 1991,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.actionRequest"
        },
        {
          "name": "_eventRequest",
          "description": "Fires a custom event within the context of the chart",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1995,
              "column": 2
            },
            "end": {
              "line": 2001,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.actionRequest"
        },
        {
          "name": "_computeShowTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2137,
              "column": 2
            },
            "end": {
              "line": 2143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showTooltip"
            },
            {
              "name": "_internalShowTooltip"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.showTooltip"
        },
        {
          "name": "_heightChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2618,
              "column": 2
            },
            "end": {
              "line": 2624,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.sizeVerticalRegister"
        },
        {
          "name": "_computeVerticalRegisterHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2625,
              "column": 2
            },
            "end": {
              "line": 2652,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "deductions"
            }
          ],
          "inheritedFrom": "PxVisBehaviorChart.sizeVerticalRegister"
        },
        {
          "name": "_keepDataInSync",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 557,
              "column": 4
            },
            "end": {
              "line": 570,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.webWorkerSynchronization"
        },
        {
          "name": "_setupSizingListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3181,
              "column": 2
            },
            "end": {
              "line": 3189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_getSizing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3191,
              "column": 2
            },
            "end": {
              "line": 3193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_getImmediateSizing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 3195,
              "column": 2
            },
            "end": {
              "line": 3206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "PxVisBehaviorChart.tooltipSizing"
        },
        {
          "name": "_debounce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 559,
              "column": 6
            },
            "end": {
              "line": 564,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "cb"
            },
            {
              "name": "time"
            }
          ]
        },
        {
          "name": "_onIronResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 566,
              "column": 6
            },
            "end": {
              "line": 572,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onIronResizeDebounced",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 574,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setSeriesConfigs",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 6
            },
            "end": {
              "line": 640,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setSecondScale",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 642,
              "column": 6
            },
            "end": {
              "line": 662,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createStacks",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 664,
              "column": 6
            },
            "end": {
              "line": 675,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getOrdSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 677,
              "column": 6
            },
            "end": {
              "line": 683,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calcTooltipPos",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 685,
              "column": 6
            },
            "end": {
              "line": 700,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_fixTitleLocation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 702,
              "column": 6
            },
            "end": {
              "line": 712,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_xAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 714,
              "column": 6
            },
            "end": {
              "line": 724,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        },
        {
          "name": "_yAxisConfigChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 726,
              "column": 6
            },
            "end": {
              "line": 733,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "conf"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "dev.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 442,
          "column": 4
        },
        "end": {
          "line": 735,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "PxVisPairedBar",
      "attributes": [
        {
          "name": "width",
          "description": "The width of the elem; generally the width of the charting area for most components",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "height",
          "description": "The height of the component; generally the height of the charting area for most components.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "name": "margin",
          "description": "Defines the base margin for the chart. Calcs are run to add to the margin to accommodate axes and other elements which exist within the SVG frame, but outside the chart frame.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.margins"
        },
        {
          "name": "chart-data",
          "description": "container for the data object that drives the chart / component\nGenerally loaded with an iron-ajax tag (but doesnt have to be)\nThis can be set declaratively",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 375,
              "column": 6
            },
            "end": {
              "line": 377,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dataset"
        },
        {
          "name": "complete-series-config",
          "description": "A configuration file generated by the chart behavior based on seriesConfig and defaultSeriesConfig.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 399,
              "column": 7
            },
            "end": {
              "line": 402,
              "column": 8
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "name": "tooltip-data",
          "description": "Data reported back by the interaction space component. Displays the series name, values, and timestamp in the register. tooltipData is in the form:\n\n```\n   {\n       \"time\": \"2015-03-25T20:34:47.085Z\",\n       \"hidden\": false,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"coord\":[xCoord1, yCoord1],  //in pixel space\n           \"value\":{\n               \"x\":xVal1,             //in data space\n               \"seriesId1\":yVal1    //in data space\n           }\n       },{\n           \"name\":\"seriesId2\",\n           \"coord\":[xCoord2, yCoord2],  //in pixel space\n           \"value\":{\n               \"x\":xVal2,             //in data space\n               \"seriesId2\":yVal2    //in data space\n           },\n       }],\n       \"mouse\":[ mouseX, mouseY ],   //in pixel space\n       \"xArr\":[xCoord1 , xCoord2],   //in pixel space\n       \"yArr\":[yCoord1 , yCoord2],   //in pixel space\n   }\n```\n\nWhen not hovering on a chart, the tooltipData should still have the series names in order for them to still appear in the register. IE:\n\n```\n   {\n       \"time\": null,\n       \"hidden\": true,\n       \"series\":[{\n           \"name\":\"seriesId1\",\n           \"value\": null\n       },{\n           \"name\":\"seriesName1\",\n           \"value\": null\n       }],\n       \"mouse\": null,\n       \"xArr\": null,\n       \"yArr\": null\n   }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 677,
              "column": 4
            },
            "end": {
              "line": 680,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "default-empty-data",
          "description": "The \"empty\" dataset that should be used for tooltipData when not hovering",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 685,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "name": "extents-data",
          "description": "Data reported back by the interaction space. Displays the interpreted x & y coords, width and height, and domain extents. extentsData is in the form:\n\n```\n  {\n    x1 = {pixel-space}\n    y1 = {pixel-space}\n    x2 = {pixel-space}\n    y2 = {pixel-space}\n    w = {pixels}\n    h = {pixels}\n    eX = [{domain}, {domain}];\n    eY = [{domain}, {domain}];\n  }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 786,
              "column": 4
            },
            "end": {
              "line": 789,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "extents-action",
          "description": "Used by the chart to interpret if extentsData is strip or zoom",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 793,
              "column": 4
            },
            "end": {
              "line": 796,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "name": "chart-extents",
          "description": "Developer set chart extents for the chart. The chart will draw to whatever values are specified in the chartExtents.\nSetting this and not using \"dynamic\" will prevent the chart from\nhaving to parse the data to find the extents and therefore improve\nperformance for initial rendering\n```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nTo force the chart to calculate based on data, use \"dynamic\".\n```\n {\n     \"x\": [0,\"dynamic\"],\n     \"y\": [-10,\"dynamic\"],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1180,
              "column": 4
            },
            "end": {
              "line": 1183,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "name": "data-extents",
          "description": "```\n {\n     \"x\": [0,100],\n     \"y\": [5,50],\n }\n```\n\nFor an ordinal dataset, chart extents can be set like this:\n```\n {\n     \"x\": ['low','medium','high'],\n     \"y\": [5,50],\n }\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1216,
              "column": 4
            },
            "end": {
              "line": 1219,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "name": "svg",
          "description": "svg is a holder for the d3 instantiated svg container to draw to.\nMust be set in ready and passed to all components so they know whom to draw to.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "px-svg-elem",
          "description": "The SVG element inside the chart - not a D3 selected element.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "name": "x",
          "description": "x is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "y",
          "description": "y is a holder for the d3 instantiated scale object\nMust be set in the svg component and passed to all components so they know the drawing scale.\nThis can be set declaratively\n\nSee: https://github.com/d3/d3/blob/master/API.md#scales-d3-scale",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 443,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "is-multi-y",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 447,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "name": "offset",
          "description": "An optional offset for a variety of elements",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.sizing"
        },
        {
          "name": "selected-domain",
          "description": "New chart extents selected by the user\n\nServes as a trigger for the scale component to redefine the chart extents",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 651,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "name": "x-axis-type",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 10
            },
            "end": {
              "line": 455,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "y-axis-type",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 10
            },
            "end": {
              "line": 460,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "domain-changed",
          "description": "Boolean switching when the domain(s) has(have) changed\n\nServes as a trigger for many elements to redraw",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 509,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorD3.domainUpdate"
        },
        {
          "name": "prevent-web-worker-synchronization",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 10
            },
            "end": {
              "line": 450,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "muted-series",
          "description": "A list of user selected muted series. Tied declaratively to series components\n\nThe series name is the key and the value is a boolean for whether it is muted or not:\n\n```\n{\n    'seriesId1':true,\n    'seriesId2':false,\n }\n```\n\nIn this example, seriesId1 is muted. seriesId2 was muted, but has been turned back on.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 465,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "hard-mute",
          "description": "Allows for a \"hard\" muting of the series/categories: the\nseries/category won't show up\nin the tooltip anymore, it's tooltip data won't be shown in the register\nand its extents won't be taken into account by the chart",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 472,
              "column": 5
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "name": "disable-dynamic-update",
          "description": "Defines if the viewable chart extents should update when chartData is updated",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 69,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "chart-id",
          "description": "Internal unique ID",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "scale-padding",
          "description": "The padding for ordinal type scales - effective controls the spacing between ordinal groups\n\nExpressed as a percent of the ordinal group width, so a value of 0.5 for a bar chart means your bar and the gap between bars are the same size",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-scale.html",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorScale.scale"
        },
        {
          "name": "clip-path",
          "description": "Holder for a clipping path ID",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 798,
              "column": 4
            },
            "end": {
              "line": 801,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "series-clip-path",
          "description": "A more restricting clip path used to limit where the series are being drawn",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-d3.html",
            "start": {
              "line": 806,
              "column": 4
            },
            "end": {
              "line": 809,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "name": "tooltip-config",
          "description": "Configuration object used to customize the tooltip cosmetic properties.\nPlease refer to px-vis-tooltip and px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties\nMost interesting properties include:\n- width\n- height\n- tooltipStyle\n- forceDateTimeDisplay",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1101,
              "column": 4
            },
            "end": {
              "line": 1103,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "register-config",
          "description": "Configuration object used to customize the register cosmetic properties.\nPlease refer to px-vis-register (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1109,
              "column": 4
            },
            "end": {
              "line": 1111,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.registerConfigs"
        },
        {
          "name": "x-axis-config",
          "description": "Configuration object used to customize the X axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1187,
              "column": 4
            },
            "end": {
              "line": 1189,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "y-axis-config",
          "description": "Configuration object used to customize the Y axis cosmetic properties.\nPlease refer to px-vis-axis (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1195,
              "column": 4
            },
            "end": {
              "line": 1197,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.axisConfigs"
        },
        {
          "name": "hide-register",
          "description": "Allows to hide the register",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1035,
              "column": 4
            },
            "end": {
              "line": 1039,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.registerPositioning"
        },
        {
          "name": "prevent-resize",
          "description": "Prevents the chart from automatically resizing to fit its container",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 763,
              "column": 6
            },
            "end": {
              "line": 767,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-horizontal-alignment",
          "description": "This allows to decide how the chart\ndrawing will be horizontally aligned when smaller than its container. Values:\n- center\n- left\n- right\n\nif any other value is used then left alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 777,
              "column": 6
            },
            "end": {
              "line": 780,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "chart-vertical-alignment",
          "description": "This allows to decide how the chart\ndrawing will be vertically aligned when smaller than its container. Values:\n- center\n- top\n- bottom\n\nif any other value is used then top alignment will be chosen",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 790,
              "column": 6
            },
            "end": {
              "line": 793,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "debounce-resize-timing",
          "description": "Timing (in ms) to be used for iron resize when the chart auto size\n(preventResize = false)",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 805,
              "column": 6
            },
            "end": {
              "line": 808,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.chartAutoResize"
        },
        {
          "name": "threshold-config",
          "description": "Configuration object used to customize the threshold properties.\nPlease refer to px-vis-threshold (https://github.com/PredixDev/px-vis) for a list of supported properties",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2845,
              "column": 4
            },
            "end": {
              "line": 2847,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehaviorChart.thresholdConfig"
        },
        {
          "name": "threshold-data",
          "description": "Data representing the events. Example:\n```\n[\n     { \"for\":\"y0\", \"type\":\"max\", \"value\":35.4784 },\n     { \"for\":\"y0\", \"type\":\"min\", \"value\":7.6531 },\n     { \"for\":\"y0\", \"type\":\"mean\", \"value\":15.330657585139331 },\n     { \"for\":\"y1\", \"type\":\"mean\", \"value\":75 },\n     { \"for\":\"\", \"type\":\"quartile\", \"value\":17 }\n ]\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 1614,
              "column": 4
            },
            "end": {
              "line": 1616,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.thresholds"
        },
        {
          "name": "layer",
          "description": "Array of the svg layers",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1425,
              "column": 4
            },
            "end": {
              "line": 1428,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "number-of-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1429,
              "column": 4
            },
            "end": {
              "line": 1431,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "generate-layers",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 1432,
              "column": 4
            },
            "end": {
              "line": 1435,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "name": "dynamic-menu-config",
          "description": "The config used by a dynamic menu to create menu entries. Example:\n```\n[\n    {\n     'name': 'Delete',\n      'action': function(data) {\n        console.log('run delete');\n      },\n      'actionContext': aComponent,\n      'eventName': 'delete',\n      'icon': 'fa-trash'\n    },\n    {\n      'name': 'Bring To Front',\n      'action': function(data) {\n        console.log('run bring to front');\n      },\n      'eventName': 'bring-to-front',\n      'icon': 'fa-arrow-up'\n    }\n  ];\n```\n\n- `action` is function that will be run when a menu item is clicked. You can pass\na specific context to be used in that function through `actionContext`. Otherwsie the\ncontext is going to be the chart itself. The `data` parameter has 2 properties: `itemConfig`\nwhich is this specific menu item config object and `additionalDetail` which represents the\nregister item: `value` and `name` (name is the serie id). Please note that because `itemConfig`\nis being passed back you could tie anything to it and have it available in this function.\nIf dynamicMenuConfig is passed in directly in the HTML then `action` will have to be passed in\nas a string with quotes escaped rather than directly as a function.\n- `name` is the menu item displayed text\n- if `eventName` is defined then an event with this name will be fired when clicking the item\nthe detail of this event will include `data` which ahs 2 properties: `itemConfig` and `additionalDetail`\njust like `action` is getting. The event is fired from the chart\n- `icon` is optional and defines a font-awesome icon to be used for the menu entry",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2073,
              "column": 4
            },
            "end": {
              "line": 2075,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.dynamicMenuConfig"
        },
        {
          "name": "series-color-list",
          "description": "Defines an colors in order that will be used for series.",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-colors.html",
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxColorsBehavior.dataVisColors"
        },
        {
          "name": "action-config",
          "description": "Configuration used to define what actions happen on events. Each key represents an event,\neach value can be:\n- a predefined action found as a key in px-vis-interaction-space `actionMapping`\n- a function, where `this` will be bound to the chart and the function's argument will be the mouse position on the chart",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 2096,
              "column": 4
            },
            "end": {
              "line": 2099,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "PxVisBehavior.actionConfig"
        },
        {
          "name": "show-tooltip",
          "description": "Whether to display the tooltip",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-chart.html",
            "start": {
              "line": 2124,
              "column": 4
            },
            "end": {
              "line": 2127,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehaviorChart.showTooltip"
        },
        {
          "name": "ww-data-sync-counter",
          "description": "Updated every time the chart gets new data and a sync request\nto the web worker happened. Use it for triggering observers\ninstead of chartData if the observer needs the data in the webworker\n(i.e kicking another webworker processing)",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3136,
              "column": 4
            },
            "end": {
              "line": 3139,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "PxVisBehavior.wwDataSyncCounter"
        },
        {
          "name": "annotation-data",
          "description": "The annotation data: x and y values + the series which scale should be used.\nData is an arbitrary object you want to store for use when showing the\nannotation\n```\n   [{\n       x: 1325897523,\n       y: 15.7,\n       series: y0,\n       data: {...},\n    ...\n    ]\n```",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3388,
              "column": 4
            },
            "end": {
              "line": 3393,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "show-strong-icon",
          "description": "",
          "sourceRange": {
            "file": "bower_components/px-vis/px-vis-behavior-common.html",
            "start": {
              "line": 3395,
              "column": 4
            },
            "end": {
              "line": 3398,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "PxVisBehavior.annotationData"
        },
        {
          "name": "series-config",
          "description": "A configuration file to associate series data keys, name, type, and colors.\n\nProvide two series, one for the left, one for the right.\n\n```\n {\n    \"left\": {  //seriesKey is a unique identifier for the configuration\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"male\",  //index or key name for dependent variable\n        \"y\": \"age\",  //index or key name for independent variable\n        \"xAxisUnit\": \"People\" //Unit to be used for the X axis.\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(0,255,0)\" //color you want for the series\n    },\n    \"right\": {  //seriesKey is a unique identifier for the configuration\n        \"name\": \"My Series\",  //human readable name\n        \"x\": \"female\",  //index or key name for dependent variable\n        \"y\": \"age\",  //index or key name for independent variable\n        \"xAxisUnit\": \"People\" //Unit to be used for the X axis.\n        \"hideInRegister\": true, //dont show in the register\n        \"color\": \"rgb(255,0,0)\" //color you want for the series\n    }\n }\n```",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 10
            },
            "end": {
              "line": 494,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "start-from-zero",
          "description": "DO NOT CHANGE THIS UNLESS YOU KNOW WHAT YOU ARE DOING\n\nBar charts in nearly all cases should start from 0. If you have a special case and understand the ramifications, change this to false to allow it to use the `min` value from your data",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 10
            },
            "end": {
              "line": 506,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "right-reference-config",
          "description": "A configuration object needed to draw reference curves. Format is similar to seriesConfig. Valid entries:\n- `x` : default: 'x'\n- `y`: default: 'y'\n- `interpolationFunction` : default: Px.d3.curveCardinal\n- `color` :\n- `strokeWidth` default: 1",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 10
            },
            "end": {
              "line": 516,
              "column": 38
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "left-reference-config",
          "description": "A configuration object needed to draw reference curves. Format is similar to seriesConfig. Valid entries:\n- `x` : default: 'x'\n- `y`: default: 'y'\n- `interpolationFunction` : default: Px.d3.curveCardinal\n- `color` :\n- `strokeWidth` default: 1",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 10
            },
            "end": {
              "line": 526,
              "column": 37
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "reference-data",
          "description": "Data to create reference curves. Format matches chartData and requires a referenceConfig with similar props to seriesConfig. Supply data for both left and right in this array",
          "sourceRange": {
            "start": {
              "line": 531,
              "column": 10
            },
            "end": {
              "line": 531,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "width-changed",
          "description": "Fired when the `width` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "height-changed",
          "description": "Fired when the `height` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.baseSize"
        },
        {
          "type": "CustomEvent",
          "name": "complete-series-config-changed",
          "description": "Fired when the `completeSeriesConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.completeSeriesConfig"
        },
        {
          "type": "CustomEvent",
          "name": "tooltip-data-changed",
          "description": "Fired when the `tooltipData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "default-empty-data-changed",
          "description": "Fired when the `defaultEmptyData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.tooltipData"
        },
        {
          "type": "CustomEvent",
          "name": "extents-data-changed",
          "description": "Fired when the `extentsData` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "type": "CustomEvent",
          "name": "extents-action-changed",
          "description": "Fired when the `extentsAction` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.extentsData"
        },
        {
          "type": "CustomEvent",
          "name": "chart-extents-changed",
          "description": "Fired when the `chartExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.chartExtents"
        },
        {
          "type": "CustomEvent",
          "name": "data-extents-changed",
          "description": "Fired when the `dataExtents` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.dataExtents"
        },
        {
          "type": "CustomEvent",
          "name": "svg-changed",
          "description": "Fired when the `svg` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "px-svg-elem-changed",
          "description": "Fired when the `pxSvgElem` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.svg"
        },
        {
          "type": "CustomEvent",
          "name": "x-changed",
          "description": "Fired when the `x` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "y-changed",
          "description": "Fired when the `y` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.axes"
        },
        {
          "type": "CustomEvent",
          "name": "selected-domain-changed",
          "description": "Fired when the `selectedDomain` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.selectedDomain"
        },
        {
          "type": "CustomEvent",
          "name": "domain-changed-changed",
          "description": "Fired when the `domainChanged` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.domainUpdateNotify"
        },
        {
          "type": "CustomEvent",
          "name": "muted-series-changed",
          "description": "Fired when the `mutedSeries` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.mutedSeries"
        },
        {
          "type": "CustomEvent",
          "name": "clip-path-changed",
          "description": "Fired when the `clipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "series-clip-path-changed",
          "description": "Fired when the `seriesClipPath` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorD3.clipPath"
        },
        {
          "type": "CustomEvent",
          "name": "layer-changed",
          "description": "Fired when the `layer` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehaviorChart.layers"
        },
        {
          "type": "CustomEvent",
          "name": "action-config-changed",
          "description": "Fired when the `actionConfig` property changes.",
          "metadata": {},
          "inheritedFrom": "PxVisBehavior.actionConfig"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-vis-paired-bar",
      "mixins": [
        "PxVisBehavior.baseSize",
        "PxVisBehavior.margins",
        "PxVisBehavior.dataset",
        "PxVisBehavior.completeSeriesConfig",
        "PxVisBehavior.tooltipData",
        "PxVisBehavior.extentsData",
        "PxVisBehavior.commonMethods",
        "PxVisBehavior.chartExtents",
        "PxVisBehavior.dataExtents",
        "PxVisBehaviorD3.svg",
        "PxVisBehaviorD3.axes",
        "PxVisBehaviorScale.scale",
        "PxVisBehaviorD3.clipPath",
        "PxVisBehaviorChart.saveImage",
        "PxVisBehaviorD3.domainUpdate",
        "PxVisBehaviorChart.subConfiguration",
        "PxVisBehaviorChart.registerConfigs",
        "PxVisBehaviorChart.axisConfigs",
        "PxVisBehaviorChart.registerPositioning",
        "PxVisBehaviorChart.chartAutoResize",
        "PxVisBehavior.thresholds",
        "PxVisBehaviorChart.layers",
        "PxVisBehavior.dynamicMenuConfig",
        "PxColorsBehavior.dataVisColorTheming",
        "PxVisBehavior.axisTypes",
        "PxVisBehavior.actionConfig",
        "PxVisBehaviorChart.actionRequest",
        "PxVisBehaviorChart.showTooltip",
        "PxVisBehaviorChart.sizeVerticalRegister",
        "PxVisBehaviorChart.thresholdConfig",
        "PxVisBehaviorChart.webWorkerSynchronization",
        "PxVisBehavior.updateStylesOverride",
        "PxVisBehavior.annotationData",
        "PxVisBehaviorChart.tooltipSizing"
      ]
    }
  ]
}
